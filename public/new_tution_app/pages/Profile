
import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { UserProfile } from "@/entities/UserProfile";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { 
  User as UserIcon, 
  GraduationCap, 
  BookOpen, 
  Crown,
  Save,
  Sparkles,
  Trophy,
  Target,
  MapPin,
  Download,
  CreditCard
} from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { motion } from "framer-motion";

export default function Profile() {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [formData, setFormData] = useState({
    student_name: "",
    class_level: "",
    board: "",
    preferred_subjects: [],
    learning_style: "Not Identified",
    preferred_language: "English",
    teacher_avatar: "Miss Sapna", // Added teacher_avatar
    city: "", 
    country: "India" 
  });

  const subjects = [
    "Math", "Science", "English", "Hindi", "Social Studies", 
    "Physics", "Chemistry", "Biology", "History", "Geography"
  ];

  const boards = ["CBSE", "ICSE", "State Board", "Other"];
  const learningStyles = ["Visual", "Auditory", "Kinesthetic", "Reading/Writing", "Not Identified"];
  const languages = ["English", "Hindi", "Both"];
  const teacherAvatars = ["Miss Sapna", "Roy Sir"]; // Added teacherAvatars

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const profiles = await UserProfile.filter({ created_by: currentUser.email });
      if (profiles.length > 0) {
        const userProfile = profiles[0];
        setProfile(userProfile);
        setFormData({
          student_name: userProfile.student_name || "",
          class_level: userProfile.class_level || "",
          board: userProfile.board || "",
          preferred_subjects: userProfile.preferred_subjects || [],
          learning_style: userProfile.learning_style || "Not Identified",
          preferred_language: userProfile.preferred_language || "English",
          teacher_avatar: userProfile.teacher_avatar || "Miss Sapna", // Load teacher_avatar
          city: userProfile.city || "", 
          country: userProfile.country || "India" 
        });
      } else {
        setIsEditing(true);
        setFormData(prev => ({
          ...prev,
          student_name: currentUser.full_name || ""
        }));
      }
    } catch (error) {
      console.error("Error loading user data:", error);
    }
  };

  const handleSave = async () => {
    if (!formData.student_name || !formData.class_level || !formData.board) {
      alert("Please fill in all required fields");
      return;
    }

    setIsSaving(true);
    try {
      if (profile) {
        await UserProfile.update(profile.id, formData);
      } else {
        await UserProfile.create(formData);
      }
      await loadUserData();
      setIsEditing(false);
    } catch (error) {
      console.error("Error saving profile:", error);
      alert("Error saving profile. Please try again.");
    }
    setIsSaving(false);
  };

  const handleSubjectToggle = (subject) => {
    setFormData(prev => ({
      ...prev,
      preferred_subjects: prev.preferred_subjects.includes(subject)
        ? prev.preferred_subjects.filter(s => s !== subject)
        : [...prev.preferred_subjects, subject]
    }));
  };

  const getSubscriptionColor = () => {
    return profile?.subscription_status === 'premium' ? 'from-yellow-400 to-orange-500' : 'from-gray-400 to-gray-500';
  };

  // New helper function for teacher info
  const getTeacherInfo = (avatar) => {
    switch (avatar) {
      case "Miss Sapna":
        return {
          name: "Miss Sapna",
          language: "Hindi",
          description: "Your friendly Hindi teacher",
          color: "from-pink-400 to-rose-500"
        };
      case "Roy Sir":
        return {
          name: "Roy Sir", 
          language: "English",
          description: "Your English mentor",
          color: "from-blue-400 to-indigo-500"
        };
      default:
        return {
          name: "Miss Sapna",
          language: "Hindi", 
          description: "Your friendly Hindi teacher",
          color: "from-pink-400 to-rose-500"
        };
    }
  };

  const handlePwaDownload = () => {
    alert("PWA functionality can be enabled at the platform level. This button is a placeholder to demonstrate the UI.");
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white p-4 md:p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Your Learning Profile</h1>
          <p className="text-gray-600">Personalize your educational journey</p>
        </motion.div>

        <div className="grid md:grid-cols-3 gap-6">
          {/* Profile Overview */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="md:col-span-1"
          >
            <Card className="text-center border-0 shadow-lg bg-white/80 backdrop-blur-sm">
              <CardHeader className="pb-3">
                <div className="w-20 h-20 mx-auto bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mb-4">
                  <span className="text-2xl font-bold text-white">
                    {profile?.student_name?.[0]?.toUpperCase() || user?.full_name?.[0]?.toUpperCase() || 'U'}
                  </span>
                </div>
                <CardTitle className="text-xl">
                  {profile?.student_name || user?.full_name || 'Student'}
                </CardTitle>
                <div className="flex items-center justify-center gap-2 mt-2">
                  <Badge className={`bg-gradient-to-r ${getSubscriptionColor()} text-white border-0`}>
                    {profile?.subscription_status === 'premium' ? (
                      <>
                        <Crown className="w-3 h-3 mr-1" />
                        Premium
                      </>
                    ) : (
                      'Free Plan'
                    )}
                  </Badge>
                </div>
                {/* Teacher Avatar Preview */}
                {profile?.teacher_avatar && (
                  <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                    <p className="text-sm text-gray-600 mb-2">Current Teacher</p>
                    <div className="flex items-center gap-3">
                      <div className={`w-10 h-10 rounded-full bg-gradient-to-r ${getTeacherInfo(profile.teacher_avatar).color} flex items-center justify-center`}>
                        <span className="text-white font-semibold text-sm">
                          {profile.teacher_avatar === "Miss Sapna" ? "सा" : "R"}
                        </span>
                      </div>
                      <div className="text-left">
                        <p className="font-semibold text-sm">{getTeacherInfo(profile.teacher_avatar).name}</p>
                        <p className="text-xs text-gray-500">{getTeacherInfo(profile.teacher_avatar).description}</p>
                      </div>
                    </div>
                  </div>
                )}
              </CardHeader>
              <CardContent className="pt-0">
                {profile && (
                  <div className="space-y-3">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600 flex items-center gap-2">
                        <GraduationCap className="w-4 h-4" />
                        Class
                      </span>
                      <Badge variant="outline">{profile.class_level}</Badge>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600 flex items-center gap-2">
                        <BookOpen className="w-4 h-4" />
                        Board
                      </span>
                      <Badge variant="outline">{profile.board}</Badge>
                    </div>
                    {/* Location Information */}
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600 flex items-center gap-2">
                        <MapPin className="w-4 h-4" />
                        Location
                      </span>
                      <Badge variant="outline">
                        {profile.city ? `${profile.city}, ${profile.country || 'India'}` : "Not Set"}
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600 flex items-center gap-2">
                        <Trophy className="w-4 h-4 text-orange-500" />
                        Points
                      </span>
                      <Badge className="bg-orange-100 text-orange-700">
                        {profile.total_points || 0}
                      </Badge>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600 flex items-center gap-2">
                        <Target className="w-4 h-4 text-green-500" />
                        Streak
                      </span>
                      <Badge className="bg-green-100 text-green-700">
                        {profile.daily_streak || 0} days
                      </Badge>
                    </div>
                  </div>
                )}
                <div className="mt-6 space-y-2">
                    <Button asChild variant="outline" className="w-full">
                        <Link to={createPageUrl('Premium')}>
                            <CreditCard className="w-4 h-4 mr-2" /> Manage Subscription
                        </Link>
                    </Button>
                    <Button variant="outline" className="w-full" onClick={handlePwaDownload}>
                        <Download className="w-4 h-4 mr-2" /> Download App
                    </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Profile Details */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            className="md:col-span-2"
          >
            <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <UserIcon className="w-5 h-5" />
                    Profile Details
                  </CardTitle>
                  {!isEditing ? (
                    <Button 
                      onClick={() => setIsEditing(true)}
                      variant="outline"
                      size="sm"
                    >
                      Edit Profile
                    </Button>
                  ) : (
                    <div className="flex gap-2">
                      <Button 
                        onClick={() => setIsEditing(false)}
                        variant="outline"
                        size="sm"
                      >
                        Cancel
                      </Button>
                      <Button 
                        onClick={handleSave}
                        size="sm"
                        disabled={isSaving}
                        className="bg-gradient-to-r from-blue-500 to-blue-600"
                      >
                        <Save className="w-4 h-4 mr-1" />
                        {isSaving ? 'Saving...' : 'Save'}
                      </Button>
                    </div>
                  )}
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Basic Information */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="student_name">Full Name *</Label>
                    <Input
                      id="student_name"
                      value={formData.student_name}
                      onChange={(e) => setFormData(prev => ({ ...prev, student_name: e.target.value }))}
                      disabled={!isEditing}
                      className="bg-white/70"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Email</Label>
                    <Input
                      value={user?.email || ''}
                      disabled
                      className="bg-gray-50"
                    />
                  </div>
                </div>

                {/* Location Information */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="city">City</Label>
                    <Input
                      id="city"
                      value={formData.city}
                      onChange={(e) => setFormData(prev => ({...prev, city: e.target.value}))}
                      disabled={!isEditing}
                      className="bg-white/70"
                      placeholder="e.g., Mumbai"
                    />
                  </div>
                   <div className="space-y-2">
                    <Label htmlFor="country">Country</Label>
                    <Input
                      id="country"
                      value={formData.country}
                      onChange={(e) => setFormData(prev => ({...prev, country: e.target.value}))}
                      disabled={!isEditing}
                      className="bg-white/70"
                      placeholder="e.g., India"
                    />
                  </div>
                </div>

                {/* Educational Information */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>Current Class *</Label>
                    <Select 
                      value={formData.class_level}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, class_level: value }))}
                      disabled={!isEditing}
                    >
                      <SelectTrigger className="bg-white/70">
                        <SelectValue placeholder="Select class" />
                      </SelectTrigger>
                      <SelectContent>
                        {Array.from({ length: 12 }, (_, i) => (
                          <SelectItem key={i + 1} value={String(i + 1)}>
                            Class {i + 1}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Educational Board *</Label>
                    <Select 
                      value={formData.board}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, board: value }))}
                      disabled={!isEditing}
                    >
                      <SelectTrigger className="bg-white/70">
                        <SelectValue placeholder="Select board" />
                      </SelectTrigger>
                      <SelectContent>
                        {boards.map(board => (
                          <SelectItem key={board} value={board}>
                            {board}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Learning Preferences */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>Learning Style</Label>
                    <Select 
                      value={formData.learning_style}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, learning_style: value }))}
                      disabled={!isEditing}
                    >
                      <SelectTrigger className="bg-white/70">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {learningStyles.map(style => (
                          <SelectItem key={style} value={style}>
                            {style}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Preferred Language</Label>
                    <Select 
                      value={formData.preferred_language}
                      onValueChange={(value) => setFormData(prev => ({ ...prev, preferred_language: value }))}
                      disabled={!isEditing}
                    >
                      <SelectTrigger className="bg-white/70">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {languages.map(lang => (
                          <SelectItem key={lang} value={lang}>
                            {lang}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Teacher Avatar Selection */}
                <div className="space-y-3">
                  <Label>Preferred Teacher</Label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {teacherAvatars.map(avatar => {
                      const teacherInfo = getTeacherInfo(avatar);
                      return (
                        <Button
                          key={avatar}
                          variant={formData.teacher_avatar === avatar ? "default" : "outline"}
                          onClick={() => setFormData(prev => ({ ...prev, teacher_avatar: avatar }))}
                          disabled={!isEditing}
                          className={`h-auto p-4 ${formData.teacher_avatar === avatar 
                            ? `bg-gradient-to-r ${teacherInfo.color}` 
                            : "bg-white/70"
                          }`}
                        >
                          <div className="flex items-center gap-3 w-full">
                            <div className={`w-12 h-12 rounded-full ${formData.teacher_avatar === avatar 
                              ? 'bg-white/20' 
                              : `bg-gradient-to-r ${teacherInfo.color}`
                            } flex items-center justify-center`}>
                              <span className={`font-semibold text-lg ${formData.teacher_avatar === avatar 
                                ? 'text-white' 
                                : 'text-white'
                              }`}>
                                {avatar === "Miss Sapna" ? "सा" : "R"}
                              </span>
                            </div>
                            <div className="text-left">
                              <p className={`font-semibold ${formData.teacher_avatar === avatar ? 'text-white' : 'text-gray-900'}`}>
                                {teacherInfo.name}
                              </p>
                              <p className={`text-sm ${formData.teacher_avatar === avatar ? 'text-white/80' : 'text-gray-600'}`}>
                                Teaches in {teacherInfo.language}
                              </p>
                            </div>
                          </div>
                        </Button>
                      );
                    })}
                  </div>
                </div>

                {/* Preferred Subjects */}
                <div className="space-y-3">
                  <Label>Preferred Subjects</Label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                    {subjects.map(subject => (
                      <Button
                        key={subject}
                        variant={formData.preferred_subjects.includes(subject) ? "default" : "outline"}
                        size="sm"
                        onClick={() => handleSubjectToggle(subject)}
                        disabled={!isEditing}
                        className={formData.preferred_subjects.includes(subject) 
                          ? "bg-gradient-to-r from-blue-500 to-blue-600" 
                          : "bg-white/70"
                        }
                      >
                        {subject}
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
      </div>
    </div>
  );
}
