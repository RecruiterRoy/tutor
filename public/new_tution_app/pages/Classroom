import React, { useState, useEffect, useRef } from "react";
import { InvokeLLM, UploadFile } from "@/integrations/Core";
import { User } from "@/entities/User";
import { UserProfile } from "@/entities/UserProfile";
import { ChatSession } from "@/entities/ChatSession";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { 
  Send, 
  Bot, 
  User as UserIcon, 
  BookOpen, 
  Lightbulb,
  MessageCircle,
  Loader2,
  Sparkles,
  Camera,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  Image as ImageIcon,
  X
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function Classroom() {
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [selectedSubject, setSelectedSubject] = useState("");
  const [currentTopic, setCurrentTopic] = useState("");
  const messagesEndRef = useRef(null);
  const [sessionId, setSessionId] = useState(null);

  // Voice and OCR states
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [showCameraDialog, setShowCameraDialog] = useState(false);
  const [capturedImage, setCapturedImage] = useState(null);
  const [isProcessingImage, setIsProcessingImage] = useState(false);
  const videoRef = useRef(null);
  const streamRef = useRef(null);
  const recognitionRef = useRef(null);
  const synthesisRef = useRef(null);

  const subjects = [
    "Math", "Science", "English", "Hindi", "Social Studies", 
    "Physics", "Chemistry", "Biology", "History", "Geography"
  ];

  useEffect(() => {
    loadUserData();
    initializeChat();
    setupSpeechRecognition();
    return () => {
      stopCamera();
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const loadUserData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const profiles = await UserProfile.filter({ created_by: currentUser.email });
      if (profiles.length > 0) {
        setProfile(profiles[0]);
      }
    } catch (error) {
      console.error("Error loading user data:", error);
    }
  };

  const getTeacherInfo = () => {
    const avatar = profile?.teacher_avatar || "Miss Sapna";
    switch (avatar) {
      case "Miss Sapna":
        return {
          name: "Miss Sapna",
          language: "Hindi",
          voice: "Google हिन्दी",
          greeting: "नमस्ते! मैं आपकी शिक्षिका हूँ। आज हम क्या पढ़ेंगे?",
          color: "from-pink-400 to-rose-500",
          avatar: "सा"
        };
      case "Roy Sir":
        return {
          name: "Roy Sir",
          language: "English", 
          voice: "Microsoft Ravi - English (India)",
          greeting: "Hello! I'm your teacher Roy. What would you like to learn today?",
          color: "from-blue-400 to-indigo-500",
          avatar: "R"
        };
      default:
        return {
          name: "Miss Sapna",
          language: "Hindi",
          voice: "Google हिन्दी",
          greeting: "नमस्ते! मैं आपकी शिक्षिका हूँ। आज हम क्या पढ़ेंगे?",
          color: "from-pink-400 to-rose-500",
          avatar: "सा"
        };
    }
  };

  const initializeChat = () => {
    const teacher = getTeacherInfo();
    const welcomeMessage = {
      id: Date.now(),
      role: "tutor",
      message: teacher.greeting,
      timestamp: new Date().toISOString(),
      isWelcome: true
    };
    setMessages([welcomeMessage]);
  };

  const setupSpeechRecognition = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      
      const teacher = getTeacherInfo();
      recognitionRef.current.lang = teacher.language === 'Hindi' ? 'hi-IN' : 'en-IN';
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;

      recognitionRef.current.onstart = () => {
        setIsListening(true);
      };

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setCurrentMessage(transcript);
        setIsListening(false);
      };

      recognitionRef.current.onerror = () => {
        setIsListening(false);
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    }
  };

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
    }
  };

  const speakMessage = (text) => {
    if ('speechSynthesis' in window) {
      // Stop any ongoing speech
      window.speechSynthesis.cancel();
      
      const teacher = getTeacherInfo();
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set voice based on teacher
      const voices = window.speechSynthesis.getVoices();
      let selectedVoice = null;
      
      if (teacher.language === 'Hindi') {
        selectedVoice = voices.find(voice => 
          voice.lang.includes('hi') || voice.name.includes('Hindi')
        );
      } else {
        selectedVoice = voices.find(voice => 
          voice.name.includes('Ravi') || 
          (voice.lang === 'en-IN' && voice.name.includes('Male'))
        ) || voices.find(voice => voice.lang === 'en-IN');
      }
      
      if (selectedVoice) {
        utterance.voice = selectedVoice;
      }
      
      utterance.rate = 0.9;
      utterance.pitch = 1;
      
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      window.speechSynthesis.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' },
        audio: false
      });
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
    } catch (err) {
      console.error("Error accessing camera:", err);
      alert("Could not access camera. Please check permissions.");
    }
  };

  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
  };

  const capturePhoto = () => {
    if (!videoRef.current) return;

    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(videoRef.current, 0, 0);

    canvas.toBlob((blob) => {
      const file = new File([blob], `question-${Date.now()}.jpg`, { type: 'image/jpeg' });
      setCapturedImage(file);
      setShowCameraDialog(false);
      processImageWithOCR(file);
    }, 'image/jpeg', 0.8);
  };

  const processImageWithOCR = async (imageFile) => {
    setIsProcessingImage(true);
    try {
      // Upload the image first
      const { file_url } = await UploadFile({ file: imageFile });
      
      // Extract text using OCR (simulated - you would use actual OCR service)
      const ocrPrompt = `
        Analyze this image which contains text from a textbook or handwritten notes.
        Extract all the text content and identify any questions or problems that need to be solved.
        If there are mathematical equations, diagrams, or questions, describe them clearly.
        Return the extracted text and any questions found.
      `;

      const ocrResult = await InvokeLLM({
        prompt: ocrPrompt,
        file_urls: [file_url]
      });

      // Add the extracted text as a message
      const ocrMessage = {
        id: Date.now(),
        role: "student",
        message: `[Image captured] Extracted text: ${ocrResult}`,
        timestamp: new Date().toISOString(),
        hasImage: true,
        imageUrl: file_url
      };

      setMessages(prev => [...prev, ocrMessage]);
      
      // Automatically get AI response for the extracted content
      handleAIResponse(ocrResult, [...messages, ocrMessage]);

    } catch (error) {
      console.error("Error processing image:", error);
      alert("Failed to process image. Please try again.");
    }
    setIsProcessingImage(false);
    setCapturedImage(null);
  };

  const handleSendMessage = async () => {
    if (!currentMessage.trim()) return;

    const studentMessage = {
      id: Date.now(),
      role: "student",
      message: currentMessage.trim(),
      timestamp: new Date().toISOString()
    };

    const updatedMessages = [...messages, studentMessage];
    setMessages(updatedMessages);
    setCurrentMessage("");
    
    await handleAIResponse(currentMessage.trim(), updatedMessages);
  };

  const handleAIResponse = async (userMessage, messageHistory) => {
    setIsTyping(true);

    try {
      const teacher = getTeacherInfo();
      
      // Prepare context for AI
      const context = `
        You are ${teacher.name}, a ${teacher.language} teacher for Indian students.
        
        Student Profile:
        - Name: ${profile?.student_name || user?.full_name || 'Student'}
        - Class: ${profile?.class_level || 'Not specified'}
        - Board: ${profile?.board || 'Not specified'}
        - Preferred Language: ${profile?.preferred_language || 'English'}
        - Learning Style: ${profile?.learning_style || 'Not identified'}
        - Current Subject: ${selectedSubject || 'General'}
        
        Teacher Instructions:
        ${teacher.language === 'Hindi' ? 
          '- आप एक अनुभवी हिंदी शिक्षिका हैं\n- सरल और स्पष्ट हिंदी में समझाएं\n- भारतीय संदर्भ और उदाहरण उपयोग करें\n- धैर्य रखें और प्रोत्साहित करें' :
          '- You are an experienced English teacher from India\n- Use clear, simple English appropriate for Indian students\n- Include relevant examples from Indian context\n- Be patient and encouraging'
        }
        - Adapt explanations to the student's class level
        - Break down complex concepts into smaller parts
        - Ask follow-up questions to ensure understanding
        - Be supportive and never make the student feel bad
        
        Previous conversation: ${messageHistory.slice(-3).map(m => `${m.role}: ${m.message}`).join('\n')}
        
        Student's current question/message: ${userMessage}
        
        ${teacher.language === 'Hindi' ? 
          'कृपया हिंदी में उत्तर दें।' : 
          'Please respond in English.'
        }
      `;

      const response = await InvokeLLM({
        prompt: context,
        add_context_from_internet: selectedSubject ? true : false
      });

      const tutorMessage = {
        id: Date.now() + 1,
        role: "tutor",
        message: response,
        timestamp: new Date().toISOString()
      };

      setMessages(prev => [...prev, tutorMessage]);

      // Speak the response
      speakMessage(response);

      // Save chat session
      if (selectedSubject) {
        const sessionData = {
          subject: selectedSubject,
          topic: currentTopic || "General Discussion",
          messages: [...messageHistory, tutorMessage].map(m => ({
            role: m.role,
            message: m.message,
            timestamp: m.timestamp
          })),
          difficulty_level: profile?.class_level <= "5" ? "beginner" : 
                          profile?.class_level <= "8" ? "intermediate" : "advanced"
        };

        if (sessionId) {
          await ChatSession.update(sessionId, sessionData);
        } else {
          const newSession = await ChatSession.create(sessionData);
          setSessionId(newSession.id);
        }
      }

    } catch (error) {
      const errorMessage = {
        id: Date.now() + 1,
        role: "tutor",
        message: getTeacherInfo().language === 'Hindi' ? 
          "क्षमा करें, मुझे तकनीकी समस्या हो रही है। कृपया कुछ देर बाद पूछें।" :
          "I apologize, but I'm having trouble connecting right now. Please try again in a moment.",
        timestamp: new Date().toISOString(),
        isError: true
      };
      setMessages(prev => [...prev, errorMessage]);
    }

    setIsTyping(false);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const startNewSession = () => {
    setMessages([]);
    setSessionId(null);
    setCurrentTopic("");
    initializeChat();
  };

  const teacher = getTeacherInfo();

  return (
    <div className="h-screen flex flex-col bg-gradient-to-b from-blue-50 to-white">
      <div className="flex-1 flex flex-col max-w-4xl mx-auto w-full p-4">
        {/* Header */}
        <Card className="mb-4 border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className={`w-12 h-12 bg-gradient-to-r ${teacher.color} rounded-xl flex items-center justify-center shadow-lg`}>
                  <span className="text-xl font-bold text-white">{teacher.avatar}</span>
                </div>
                <div>
                  <CardTitle className="flex items-center gap-2">
                    {teacher.name}'s Classroom
                    <Sparkles className="w-5 h-5 text-yellow-500" />
                  </CardTitle>
                  <p className="text-sm text-gray-500">
                    {profile?.student_name ? `Hello ${profile.student_name}!` : `Learning with ${teacher.name}`}
                  </p>
                  <Badge variant="outline" className="text-xs mt-1">
                    Voice: {teacher.voice}
                  </Badge>
                </div>
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={startNewSession}
                  className="hidden md:flex"
                >
                  New Session
                </Button>
              </div>
            </div>
            
            <div className="flex gap-3 mt-4">
              <Select value={selectedSubject} onValueChange={setSelectedSubject}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="Select Subject" />
                </SelectTrigger>
                <SelectContent>
                  {subjects.map(subject => (
                    <SelectItem key={subject} value={subject}>
                      {subject}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              {selectedSubject && (
                <Input
                  placeholder="Current topic (optional)"
                  value={currentTopic}
                  onChange={(e) => setCurrentTopic(e.target.value)}
                  className="flex-1"
                />
              )}
            </div>
          </CardHeader>
        </Card>

        {/* Chat Messages */}
        <Card className="flex-1 flex flex-col border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            <AnimatePresence>
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className={`flex gap-3 ${message.role === 'student' ? 'flex-row-reverse' : ''}`}
                >
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                    message.role === 'student' 
                      ? 'bg-gradient-to-r from-green-400 to-green-500' 
                      : `bg-gradient-to-r ${teacher.color}`
                  }`}>
                    {message.role === 'student' ? 
                      <UserIcon className="w-4 h-4 text-white" /> : 
                      <span className="text-white font-semibold text-sm">{teacher.avatar}</span>
                    }
                  </div>
                  
                  <div className={`flex-1 max-w-2xl ${message.role === 'student' ? 'text-right' : ''}`}>
                    <div className={`inline-block p-4 rounded-2xl ${
                      message.role === 'student' 
                        ? 'bg-gradient-to-r from-green-500 to-green-600 text-white' 
                        : message.isError
                        ? 'bg-red-50 border border-red-200 text-red-700'
                        : 'bg-white border border-gray-200 text-gray-800 shadow-sm'
                    }`}>
                      {message.hasImage && (
                        <div className="mb-2">
                          <Badge variant="secondary" className="text-xs">
                            <ImageIcon className="w-3 h-3 mr-1" />
                            Image analyzed
                          </Badge>
                        </div>
                      )}
                      <p className="whitespace-pre-wrap text-sm leading-relaxed">
                        {message.message}
                      </p>
                      {message.isWelcome && (
                        <div className="mt-3 flex flex-wrap gap-2">
                          <Badge variant="secondary" className="bg-blue-100 text-blue-700">
                            <BookOpen className="w-3 h-3 mr-1" />
                            Ask questions
                          </Badge>
                          <Badge variant="secondary" className="bg-purple-100 text-purple-700">
                            <Lightbulb className="w-3 h-3 mr-1" />
                            Get explanations
                          </Badge>
                          <Badge variant="secondary" className="bg-orange-100 text-orange-700">
                            <MessageCircle className="w-3 h-3 mr-1" />
                            Practice problems
                          </Badge>
                        </div>
                      )}
                      {message.role === 'tutor' && !message.isWelcome && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => speakMessage(message.message)}
                          className="mt-2 h-6 px-2 text-xs"
                        >
                          <Volume2 className="w-3 h-3 mr-1" />
                          Replay
                        </Button>
                      )}
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      {new Date(message.timestamp).toLocaleTimeString()}
                    </p>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>

            {isTyping && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex gap-3"
              >
                <div className={`w-8 h-8 rounded-full bg-gradient-to-r ${teacher.color} flex items-center justify-center`}>
                  <span className="text-white font-semibold text-sm">{teacher.avatar}</span>
                </div>
                <div className="bg-white border border-gray-200 rounded-2xl p-4 shadow-sm">
                  <div className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
                    <span className="text-sm text-gray-600">{teacher.name} is typing...</span>
                  </div>
                </div>
              </motion.div>
            )}

            {isProcessingImage && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex gap-3"
              >
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-400 to-purple-500 flex items-center justify-center">
                  <ImageIcon className="w-4 h-4 text-white" />
                </div>
                <div className="bg-purple-50 border border-purple-200 rounded-2xl p-4">
                  <div className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin text-purple-500" />
                    <span className="text-sm text-purple-700">Analyzing image...</span>
                  </div>
                </div>
              </motion.div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="p-4 border-t border-gray-200 bg-white/50">
            <div className="flex gap-3">
              <div className="flex gap-2">
                {/* Camera Button */}
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => {
                    setShowCameraDialog(true);
                    setTimeout(startCamera, 100);
                  }}
                  className="flex-shrink-0"
                  title="Take photo of question"
                >
                  <Camera className="w-4 h-4" />
                </Button>

                {/* Voice Button */}
                <Button
                  variant="outline"
                  size="icon"
                  onClick={isListening ? stopListening : startListening}
                  className={`flex-shrink-0 ${isListening ? 'bg-red-100 border-red-300' : ''}`}
                  title={isListening ? "Stop listening" : "Start voice input"}
                >
                  {isListening ? <MicOff className="w-4 h-4 text-red-600" /> : <Mic className="w-4 h-4" />}
                </Button>

                {/* Speaker Control */}
                <Button
                  variant="outline"
                  size="icon"
                  onClick={isSpeaking ? stopSpeaking : () => {}}
                  className={`flex-shrink-0 ${isSpeaking ? 'bg-blue-100 border-blue-300' : ''}`}
                  title={isSpeaking ? "Stop speaking" : "Teacher voice"}
                >
                  {isSpeaking ? <VolumeX className="w-4 h-4 text-blue-600" /> : <Volume2 className="w-4 h-4" />}
                </Button>
              </div>

              <div className="flex-1">
                <Textarea
                  value={currentMessage}
                  onChange={(e) => setCurrentMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={teacher.language === 'Hindi' ? 
                    "अपना प्रश्न यहाँ लिखें..." : 
                    "Ask me anything about your studies..."
                  }
                  className="min-h-[50px] max-h-32 resize-none border-gray-300 focus:border-blue-500"
                  disabled={isTyping || isListening}
                />
              </div>
              <Button
                onClick={handleSendMessage}
                disabled={!currentMessage.trim() || isTyping || isListening}
                className="self-end bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 px-6"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </Card>
      </div>

      {/* Camera Dialog */}
      <Dialog open={showCameraDialog} onOpenChange={setShowCameraDialog}>
        <DialogContent className="sm:max-w-xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <Camera className="w-5 h-5" />
              Capture Question Image
            </DialogTitle>
          </DialogHeader>
          <div className="relative aspect-[4/3] bg-black rounded-lg overflow-hidden">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              muted
              className="absolute inset-0 w-full h-full object-cover"
            />
          </div>
          <div className="flex justify-end gap-3 mt-4">
            <Button
              variant="outline"
              onClick={() => {
                stopCamera();
                setShowCameraDialog(false);
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={capturePhoto}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Camera className="w-4 h-4 mr-2" />
              Capture
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}